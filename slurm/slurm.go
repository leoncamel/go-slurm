// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package slurm

/*
#include <slurm/slurm.h>
#include "slurm_helpers.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// FreeSubmitResponseResponseMsg function as declared in slurm/slurm.h:3503
func FreeSubmitResponseResponseMsg(msg *SubmitResponseMsg) {
	cmsg, cmsgAllocMap := msg.PassRef()
	C.slurm_free_submit_response_response_msg(cmsg)
	runtime.KeepAlive(cmsgAllocMap)
}

// FreeJobInfoMsg function as declared in slurm/slurm.h:3924
func FreeJobInfoMsg(jobBufferPtr *JobInfoMsg) {
	cjobBufferPtr, cjobBufferPtrAllocMap := jobBufferPtr.PassRef()
	C.slurm_free_job_info_msg(cjobBufferPtr)
	runtime.KeepAlive(cjobBufferPtrAllocMap)
}

// SetTrigger function as declared in slurm/slurm.h:4884
func SetTrigger(triggerSet *TriggerInfo) int32 {
	ctriggerSet, ctriggerSetAllocMap := triggerSet.PassRef()
	__ret := C.slurm_set_trigger(ctriggerSet)
	runtime.KeepAlive(ctriggerSetAllocMap)
	__v := (int32)(__ret)
	return __v
}

// ClearTrigger function as declared in slurm/slurm.h:4890
func ClearTrigger(triggerClear *TriggerInfo) int32 {
	ctriggerClear, ctriggerClearAllocMap := triggerClear.PassRef()
	__ret := C.slurm_clear_trigger(ctriggerClear)
	runtime.KeepAlive(ctriggerClearAllocMap)
	__v := (int32)(__ret)
	return __v
}

// Strerror function as declared in slurm/slurm_errno.h:368
func Strerror(errnum int32) *byte {
	cerrnum, cerrnumAllocMap := (C.int)(errnum), cgoAllocsUnknown
	__ret := C.slurm_strerror(cerrnum)
	runtime.KeepAlive(cerrnumAllocMap)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// GetErrno function as declared in slurm/slurm_errno.h:374
func GetErrno() int32 {
	__ret := C.slurm_get_errno()
	__v := (int32)(__ret)
	return __v
}

// SubmitBatchJob function as declared in slurm/slurm_helpers.h:20
func SubmitBatchJob(jobDescMsg *JobDescMsg) *SubmitResponseMsg {
	cjobDescMsg, cjobDescMsgAllocMap := jobDescMsg.PassRef()
	__ret := C.wrap_slurm_submit_batch_job(cjobDescMsg)
	runtime.KeepAlive(cjobDescMsgAllocMap)
	__v := NewSubmitResponseMsgRef(unsafe.Pointer(__ret))
	return __v
}

// LoadJob function as declared in slurm/slurm_helpers.h:30
func LoadJob(jobId uint32, showFlags uint16) *JobInfoMsg {
	cjobId, cjobIdAllocMap := (C.uint32_t)(jobId), cgoAllocsUnknown
	cshowFlags, cshowFlagsAllocMap := (C.uint16_t)(showFlags), cgoAllocsUnknown
	__ret := C.wrap_slurm_load_job(cjobId, cshowFlags)
	runtime.KeepAlive(cshowFlagsAllocMap)
	runtime.KeepAlive(cjobIdAllocMap)
	__v := NewJobInfoMsgRef(unsafe.Pointer(__ret))
	return __v
}
